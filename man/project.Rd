% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.R
\name{project}
\alias{project}
\title{Projection onto submodel(s)}
\usage{
project(
  object,
  nterms = NULL,
  solution_terms = NULL,
  cv_search = TRUE,
  ndraws = 400,
  nclusters = NULL,
  seed = NULL,
  regul = 1e-04,
  ...
)
}
\arguments{
\item{object}{Either a \code{refmodel}-type object created by
\code{\link[=get_refmodel]{get_refmodel()}} or \code{\link[=init_refmodel]{init_refmodel()}},
or an object which can be converted to a reference model using
\code{\link[=get_refmodel]{get_refmodel()}}.}

\item{nterms}{Number of terms in the submodel (the variable combination is
taken from the \code{varsel} information). If a numeric vector, then the
projection is performed for each model size. If \code{NULL}, the model size
suggested by the variable selection (see function \code{\link[=suggest_size]{suggest_size()}}).
Ignored if \code{solution_terms} is specified. Note that \code{nterms} does
not count the intercept, so use \code{nterms = 0} for the intercept-only
model.}

\item{solution_terms}{Variable indices onto which the projection is done. If
specified, \code{nterms} is ignored.}

\item{cv_search}{If TRUE, then the projected coefficients after L1-selection
are computed without any penalization (or using only the regularization
determined by \code{regul}). If FALSE, then the coefficients are the
solution from the L1-penalized projection. This option is relevant only if
L1-search was used. Default is TRUE for genuine reference models and FALSE
if \code{object} is datafit (see \code{\link[=init_refmodel]{init_refmodel()}}).}

\item{ndraws}{Number of posterior draws to be projected. Cannot be larger
than the number of draws in the reference model. \strong{Caution:} For
\code{ndraws <= 20}, the value of \code{ndraws} is passed to
\code{nclusters} (so that clustering is used). Ignored if \code{nclusters}
is not \code{NULL} or if the reference model is of class \code{"datafit"}
(in which case one cluster is used). See also section "Details" below.}

\item{nclusters}{Number of clusters of posterior draws to be projected.
Ignored if the reference model is of class \code{"datafit"} (in which case
one cluster is used). For the meaning of \code{NULL}, see argument
\code{ndraws}. See also section "Details" below.}

\item{seed}{Pseudorandom number generation (PRNG) seed by which the same
results can be obtained again if needed. If \code{NULL}, no seed is set and
therefore, the results are not reproducible. See \code{\link[=set.seed]{set.seed()}} for details.
Here, this seed is used for clustering the reference model's posterior
draws (if \code{!is.null(nclusters)}).}

\item{regul}{A number giving the amount of ridge regularization when
projecting onto (i.e., fitting) submodels which are (G)LMs. Usually there
is no need for regularization, but sometimes we need to add (or rather
increase, given that \code{regul} defaults to \code{1e-4}) some regularization to
avoid numerical problems.}

\item{...}{Arguments passed to \code{\link[=get_refmodel]{get_refmodel()}}.}
}
\value{
If the projection is performed onto a single submodel (i.e.,
\code{nterms} has length one or \code{solution_terms} is specified), an
object of class \code{"projection"} which is a \code{list} containing the
following elements:
\describe{
\item{\code{dis}}{Projected draws for the dispersion parameter.}
\item{\code{kl}}{The KL divergence from the submodel to the reference
model.}
\item{\code{weights}}{Weights for the projected draws.}
\item{\code{solution_terms}}{A character vector of the submodel's
predictor terms, ordered the way in which the terms were added to the
submodel.}
\item{\code{sub_fit}}{The submodel's fitted model object.}
\item{\code{family}}{A modified \code{\link{family}} object.}
\item{\code{p_type}}{A single logical value indicating whether the
reference model's posterior draws have been clustered for the projection
(\code{TRUE}) or not (\code{FALSE}).}
\item{\code{intercept}}{A single logical value indicating whether the
reference model (as well as the submodel) contains an intercept
(\code{TRUE}) or not (\code{FALSE}).}
\item{\code{extract_model_data}}{The \code{extract_model_data} function
from the reference model (see \code{\link[=init_refmodel]{init_refmodel()}}).}
\item{\code{refmodel}}{The reference model object (see
\code{\link[=init_refmodel]{init_refmodel()}}).}
}
If the projection is performed onto more than one submodel, the output from
above is returned for each submodel, giving a \code{list} with one element
for each submodel.
}
\description{
Project the posterior of the reference model onto the parameter space of a
single submodel consisting of a specific combination of predictor terms or
(after variable selection) onto the parameter space of a single or multiple
submodels of specific sizes.
}
\details{
Using less draws or clusters in \code{ndraws} or \code{nclusters}
than posterior draws in the reference model may result in slightly
inaccurate projection performance. Increasing these arguments linearly
affects the computation time.
}
\examples{
if (requireNamespace("rstanarm", quietly = TRUE)) {
  # Data:
  dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)

  # The "stanreg" fit which will be used as the reference model:
  fit <- rstanarm::stan_glm(
    y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,
    QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876
  )

  # Variable selection (here without cross-validation and with small values
  # for `nterms_max`, `nclusters`, and `nclusters_pred`, but only for the
  # sake of speed in this example; this is not recommended in general):
  vs <- varsel(fit, nterms_max = 3, nclusters = 5, nclusters_pred = 10,
               seed = 5555)

  # Projection onto the best submodel with 2 predictor terms (with a small
  # value for `nclusters`, but only for the sake of speed in this example;
  # this is not recommended in general):
  prj_from_vs <- project(vs, nterms = 2, nclusters = 10, seed = 9182)

  # Projection onto an arbitrary combination of predictor terms (with a small
  # value for `nclusters`, but only for the sake of speed in this example;
  # this is not recommended in general):
  prj <- project(fit, solution_terms = c("X1", "X3", "X5"), nclusters = 10,
                 seed = 9182)
}

}
